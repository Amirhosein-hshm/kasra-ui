/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  AddCommissionBrokerCommissionsGetParams,
  CommissionRequest,
  CommissionResponse,
  ProposalAllResponse,
  ProposalResponse,
  ProposalSingleResponseOutput,
  ReadProposalsBrokerProposalsGetParams,
  UserInfoResponse,
} from '../../types';

import { api } from '../../axios/mutator';

export const getBroker = () => {
  /**
   * @summary Read Proposals
   */
  const readProposalsBrokerProposalsGet = (
    params?: ReadProposalsBrokerProposalsGetParams
  ) => {
    return api<ProposalAllResponse[]>({
      url: `/broker/proposals/`,
      method: 'GET',
      params,
    });
  };
  /**
   * @summary Read Proposal
   */
  const readProposalBrokerProposalsProposalIdGet = (proposalId: number) => {
    return api<ProposalSingleResponseOutput>({
      url: `/broker/proposals/${proposalId}`,
      method: 'GET',
    });
  };
  /**
   * @summary Add Commission
   */
  const addCommissionBrokerCommissionsPost = (
    commissionRequest: CommissionRequest
  ) => {
    return api<ProposalResponse>({
      url: `/broker/commissions/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: commissionRequest,
    });
  };
  /**
   * @summary Add Commission
   */
  const addCommissionBrokerCommissionsGet = (
    params: AddCommissionBrokerCommissionsGetParams
  ) => {
    return api<CommissionResponse>({
      url: `/broker/commissions/`,
      method: 'GET',
      params,
    });
  };
  /**
   * @summary Read Users Master
   */
  const readUsersMasterBrokerUsersMasterGet = () => {
    return api<UserInfoResponse[]>({
      url: `/broker/users-master/`,
      method: 'GET',
    });
  };
  /**
   * @summary Read Users Discoverer
   */
  const readUsersDiscovererBrokerUsersDiscovererGet = () => {
    return api<UserInfoResponse[]>({
      url: `/broker/users-discoverer/`,
      method: 'GET',
    });
  };
  /**
   * @summary Read Users Supervisor
   */
  const readUsersSupervisorBrokerUsersSupervisorGet = () => {
    return api<UserInfoResponse[]>({
      url: `/broker/users-supervisor/`,
      method: 'GET',
    });
  };
  return {
    readProposalsBrokerProposalsGet,
    readProposalBrokerProposalsProposalIdGet,
    addCommissionBrokerCommissionsPost,
    addCommissionBrokerCommissionsGet,
    readUsersMasterBrokerUsersMasterGet,
    readUsersDiscovererBrokerUsersDiscovererGet,
    readUsersSupervisorBrokerUsersSupervisorGet,
  };
};
export type ReadProposalsBrokerProposalsGetResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getBroker>['readProposalsBrokerProposalsGet']>
  >
>;
export type ReadProposalBrokerProposalsProposalIdGetResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBroker>['readProposalBrokerProposalsProposalIdGet']
    >
  >
>;
export type AddCommissionBrokerCommissionsPostResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBroker>['addCommissionBrokerCommissionsPost']
    >
  >
>;
export type AddCommissionBrokerCommissionsGetResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBroker>['addCommissionBrokerCommissionsGet']
    >
  >
>;
export type ReadUsersMasterBrokerUsersMasterGetResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getBroker>['readUsersMasterBrokerUsersMasterGet']
    >
  >
>;
export type ReadUsersDiscovererBrokerUsersDiscovererGetResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getBroker
      >['readUsersDiscovererBrokerUsersDiscovererGet']
    >
  >
>;
export type ReadUsersSupervisorBrokerUsersSupervisorGetResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<
        typeof getBroker
      >['readUsersSupervisorBrokerUsersSupervisorGet']
    >
  >
>;
